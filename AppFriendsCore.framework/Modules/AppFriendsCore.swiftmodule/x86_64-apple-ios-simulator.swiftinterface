// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppFriendsCore
import Alamofire
@_exported import AppFriendsCore
import Cloudinary
import CoreData
import CoreStore
import Foundation
import SocketIO
import Swift
import SwiftyJWT
import UIKit
import _Concurrency
@objc @_inheritsConvenienceInitializers open class HCSDKConstants : ObjectiveC.NSObject {
  public static var kUserName: Swift.String
  public static var kUserAvatar: Swift.String
  public static var kUserID: Swift.String
  public static var kUserEmail: Swift.String
  public static var kUserRealName: Swift.String
  public static var kCustomData: Swift.String
  public static var kAppFriendsPushCategory: Swift.String
  public static var kMessageTypeSystem: Swift.String
  public static var kNotificationDuplicatedSession: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum AFError : Swift.Int {
  case unknownError = 90000
  case invalidParams = 90001
  case sdkNotInitialized = 90002
  case userNotLoggedIn = 90003
  case dialogNotFound = 20005
  case dataFetchStoreFailed = 20010
  case userAlreadyLoggedIn = 90007
  case logoutWhenNotLoggedIn = 90009
  case serverError = 90500
  case userNotFound = 30001
  case requestIsTooFrequent = 91000
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSError {
  public static func errorWithAFError(afError: AppFriendsCore.AFError) -> Foundation.NSError
  public static func errorWithAFError(afError: AppFriendsCore.AFError, errorMessage: Swift.String) -> Foundation.NSError
  public static func afError(errorCode code: Swift.Int, errorReason reason: Swift.String?, errorDescription description: Swift.String?) -> Foundation.NSError
}
@_inheritsConvenienceInitializers @objc(HCDialog) public class HCDialog : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc public protocol AFEncryptionDelegate {
  @objc func encrypt(texts: [Swift.String], forUser userID: Swift.String, completion: ((_ encryptedText: [Swift.String]?, _ error: Swift.Error?) -> Swift.Void)?)
  @objc func decrypt(encryptedTexts: [Swift.String], forUser userID: Swift.String, completion: ((_ decryptedTexts: [Swift.String]?, _ error: Swift.Error?) -> Swift.Void)?)
  @objc func encrypt(texts: [Swift.String], forDialog dialogID: Swift.String, completion: ((_ encryptedTexts: [Swift.String]?, _ error: Swift.Error?) -> Swift.Void)?)
  @objc func decrypt(encryptedTexts: [Swift.String], forDialog dialogID: Swift.String, completion: ((_ decryptedTexts: [Swift.String]?, _ error: Swift.Error?) -> Swift.Void)?)
}
extension AppFriendsCore.HCSDKCore {
  open func appfriendsHttpHeader() -> [Swift.String : Swift.String]
  open func cookiesForAppFriendsStreaming(url: Foundation.URL) -> [Foundation.HTTPCookie]?
  open func appfriendsRequest(withURL url: Foundation.URL, method: Alamofire.HTTPMethod) -> Foundation.URLRequest?
  open func isAppFriendsVideoURL(url: Swift.String) -> Swift.Bool
  open func videoStreamingURL(publicID pid: Swift.String) -> Swift.String
  open func videoThumbnailURL(publicID pid: Swift.String) -> Swift.String
  open func fullImage(publicID pid: Swift.String) -> Swift.String
  open func thumbnailImage(publicID pid: Swift.String) -> Swift.String
  open func convertToAppFriendsPublicResource(original url: Swift.String) -> Swift.String
  open func convertToAppFriendsPrivateResource(original url: Swift.String) -> Swift.String
  open func convertFromAppFriendsResource(original url: Swift.String) -> Swift.String
  open func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [Swift.AnyHashable : Any]?)
  open func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
}
extension AppFriendsCore.HCSDKCore {
  open func postMessageReceipt(tempID messageTempID: Swift.String, dialogID: Swift.String, senderID: Swift.String, receiptStatus: Swift.String)
}
extension AppFriendsCore.HCDialog {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<AppFriendsCore.HCDialog>
  @objc @NSManaged dynamic public var customData: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var dialogID: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var members: ObjectiveC.NSObject? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var muted: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var ownerID: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set(value)
  }
}
extension AppFriendsCore.HCSDKCore {
  open func renewSessionForPublicChannel(_ channelID: Swift.String, forceReloadMessage forced: Swift.Bool = false, completion: ((_ success: Swift.Bool) -> Swift.Void)? = nil)
  open func fetchHistoryMessagesFromPublicChannel(_ channelID: Swift.String, fromMessageID messageID: Swift.String, completion: ((_ error: Foundation.NSError?, _ messageID: Swift.String?) -> Swift.Void)? = nil)
  open func joinChannel(channelID cid: Swift.String, completion: ((_ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func leaveChannel(channelID cid: Swift.String, completion: ((_ error: Foundation.NSError?) -> Swift.Void)? = nil)
}
@objc public protocol HCSDKCoreSyncDelegate {
  @objc func messagesReceived(_ messages: [[Swift.String : Swift.AnyObject]], completion: ((_ success: Swift.Bool) -> Swift.Void)?)
  @objc func lastReceivedMessageIDInChannel(_ channelID: Swift.String) -> Swift.String?
  @objc func initialSyncingFinished()
  @objc func initialSyncingFailed()
}
@objc public protocol HCSDKCoreEventsDelegate {
  @objc func dialogEventReceived(_ dialogID: Swift.String, eventName: Swift.String, customData: Swift.String)
}
@objc public protocol HCSDKCoreAppCustomDataDelegate {
  @objc optional func appCustomPushReceived(data: Swift.String)
}
@objc public protocol HCSDKCoreOnlineUserObserver {
  @objc func onlineUserCountChanged(count: ObjectiveC.NSInteger)
}
@_inheritsConvenienceInitializers @objc open class HCSDKCore : ObjectiveC.NSObject {
  public static var sharedInstance: AppFriendsCore.HCSDKCore
  open var applicationKey: Swift.String {
    get
  }
  open var applicationSecret: Swift.String {
    get
  }
  open var registeredPush: Swift.Bool {
    get
  }
  weak open var syncDelegate: AppFriendsCore.HCSDKCoreSyncDelegate?
  weak open var dialogEventDelegate: AppFriendsCore.HCSDKCoreEventsDelegate?
  weak open var customDataReceiver: AppFriendsCore.HCSDKCoreAppCustomDataDelegate?
  weak open var encryptionDelegate: AppFriendsCore.AFEncryptionDelegate?
  open var appFriendsUserAccessToken: Swift.String? {
    get
  }
  open var useSandbox: Swift.Bool
  open var stressTest: Swift.Bool
  open var staging: Swift.Bool
  weak open var onlineUserObserver: AppFriendsCore.HCSDKCoreOnlineUserObserver?
  open var onlineUsers: [Foundation.NSDictionary]?
  open var onlineUsersCount: Swift.Int {
    get
    set(value)
  }
  open func initialize(key applicationKey: Swift.String, secret applicationSecret: Swift.String, uiVersion version: Swift.String? = nil, completion: ((_ success: Swift.Bool, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func authorizationtoken() -> Swift.String?
  open func subscribeToOnlineUsers(_ observer: AppFriendsCore.HCSDKCoreOnlineUserObserver)
  open func unsubscribeToOlineUsers()
  open func enableDebug()
  open func isLoggedIn() -> Swift.Bool
  open func loginWithUserInfo(_ params: [Swift.String : Swift.AnyObject]?, completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func logout(_ completion: ((_ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func startRequest(httpMethod method: Swift.String, path requestPath: Swift.String, parameters params: [Swift.String : Swift.AnyObject]?, completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func startRequest(httpMethod method: Swift.String, path requestPath: Swift.String, jsonBody: Swift.AnyObject, completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func registerDeviceForPush(_ userID: Swift.String, pushToken: Swift.String, completion: ((_ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func currentUserID() -> Swift.String?
  open func currentUserName() -> Swift.String?
  open func updateUserInfo(_ userID: Swift.String, userInfo: [Swift.String : Swift.AnyObject], completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func sendMessage(_ messageJSON: [Swift.String : Swift.AnyObject], dialogID: Swift.String, completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func sendMessage(_ messageJSON: [Swift.String : Swift.AnyObject], userID: Swift.String, completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func sendMessage(_ messageJSON: [Swift.String : Swift.AnyObject], channelID: Swift.String, completion: ((_ response: Swift.AnyObject?, _ error: Foundation.NSError?) -> Swift.Void)? = nil)
  open func uploadImage(_ image: UIKit.UIImage, completion: @escaping (_ imagePublicID: Swift.String?, _ error: Foundation.NSError?) -> Swift.Void, progress: @escaping (_ percentage: Swift.Int) -> Swift.Void)
  open func uploadVideo(_ videoData: Foundation.Data, completion: @escaping (_ imagePublicID: Swift.String?, _ error: Foundation.NSError?) -> Swift.Void, progress: @escaping (_ percentage: Swift.Int) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
